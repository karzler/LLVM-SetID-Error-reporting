/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SystemZInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2204U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2197U,	// BUNDLE
    2214U,	// LIFETIME_START
    2184U,	// LIFETIME_END
    4098U,	// A
    4107U,	// ADB
    267619U,	// ADBR
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADJDYNALLOC
    4152U,	// AEB
    267715U,	// AEBR
    0U,	// AEXT128_64
    529228U,	// AFI
    4583U,	// AG
    4473U,	// AGF
    529238U,	// AGFI
    267994U,	// AGFR
    791456U,	// AGHI
    268049U,	// AGR
    41960U,	// AGSI
    4709U,	// AH
    791446U,	// AHI
    6135U,	// AHY
    5177U,	// AL
    4218U,	// ALC
    4600U,	// ALCG
    268061U,	// ALCGR
    267947U,	// ALCR
    1053566U,	// ALFI
    4610U,	// ALG
    4483U,	// ALGF
    1053538U,	// ALGFI
    268007U,	// ALGFR
    268074U,	// ALGR
    268153U,	// ALR
    6193U,	// ALY
    267614U,	// AR
    41955U,	// ASI
    0U,	// ATOMIC_CMP_SWAPW
    0U,	// ATOMIC_LOADW_AFI
    0U,	// ATOMIC_LOADW_AR
    0U,	// ATOMIC_LOADW_MAX
    0U,	// ATOMIC_LOADW_MIN
    0U,	// ATOMIC_LOADW_NILH
    0U,	// ATOMIC_LOADW_NILHi
    0U,	// ATOMIC_LOADW_NR
    0U,	// ATOMIC_LOADW_NRi
    0U,	// ATOMIC_LOADW_OILH
    0U,	// ATOMIC_LOADW_OR
    0U,	// ATOMIC_LOADW_SR
    0U,	// ATOMIC_LOADW_UMAX
    0U,	// ATOMIC_LOADW_UMIN
    0U,	// ATOMIC_LOADW_XILF
    0U,	// ATOMIC_LOADW_XR
    0U,	// ATOMIC_LOAD_AFI
    0U,	// ATOMIC_LOAD_AGFI
    0U,	// ATOMIC_LOAD_AGHI
    0U,	// ATOMIC_LOAD_AGR
    0U,	// ATOMIC_LOAD_AHI
    0U,	// ATOMIC_LOAD_AR
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NGR
    0U,	// ATOMIC_LOAD_NGRi
    0U,	// ATOMIC_LOAD_NIHF
    0U,	// ATOMIC_LOAD_NIHFi
    0U,	// ATOMIC_LOAD_NIHH
    0U,	// ATOMIC_LOAD_NIHHi
    0U,	// ATOMIC_LOAD_NIHL
    0U,	// ATOMIC_LOAD_NIHLi
    0U,	// ATOMIC_LOAD_NILF
    0U,	// ATOMIC_LOAD_NILF32
    0U,	// ATOMIC_LOAD_NILF32i
    0U,	// ATOMIC_LOAD_NILFi
    0U,	// ATOMIC_LOAD_NILH
    0U,	// ATOMIC_LOAD_NILH32
    0U,	// ATOMIC_LOAD_NILH32i
    0U,	// ATOMIC_LOAD_NILHi
    0U,	// ATOMIC_LOAD_NILL
    0U,	// ATOMIC_LOAD_NILL32
    0U,	// ATOMIC_LOAD_NILL32i
    0U,	// ATOMIC_LOAD_NILLi
    0U,	// ATOMIC_LOAD_NR
    0U,	// ATOMIC_LOAD_NRi
    0U,	// ATOMIC_LOAD_OGR
    0U,	// ATOMIC_LOAD_OIHF
    0U,	// ATOMIC_LOAD_OIHH
    0U,	// ATOMIC_LOAD_OIHL
    0U,	// ATOMIC_LOAD_OILF
    0U,	// ATOMIC_LOAD_OILF32
    0U,	// ATOMIC_LOAD_OILH
    0U,	// ATOMIC_LOAD_OILH32
    0U,	// ATOMIC_LOAD_OILL
    0U,	// ATOMIC_LOAD_OILL32
    0U,	// ATOMIC_LOAD_OR
    0U,	// ATOMIC_LOAD_SGR
    0U,	// ATOMIC_LOAD_SR
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XGR
    0U,	// ATOMIC_LOAD_XIHF
    0U,	// ATOMIC_LOAD_XILF
    0U,	// ATOMIC_LOAD_XILF32
    0U,	// ATOMIC_LOAD_XR
    0U,	// ATOMIC_SWAPW
    0U,	// ATOMIC_SWAP_32
    0U,	// ATOMIC_SWAP_64
    267859U,	// AXBR
    6098U,	// AY
    1316757U,	// AsmBASR
    1578929U,	// AsmBRAS
    1578303U,	// AsmBRASL
    12420U,	// AsmBRC
    13373U,	// AsmBRCL
    10228776U,	// AsmCGIJ
    18093107U,	// AsmCGRJ
    10228771U,	// AsmCIJ
    18093102U,	// AsmCRJ
    16619U,	// AsmJE
    27005697U,	// AsmJEAltCGI
    51647250U,	// AsmJEAltCGR
    27005689U,	// AsmJEAltCI
    51647242U,	// AsmJEAltCR
    27005167U,	// AsmJECGI
    51646716U,	// AsmJECGR
    27005161U,	// AsmJECI
    51646710U,	// AsmJECR
    16535U,	// AsmJEL
    17048U,	// AsmJH
    27005238U,	// AsmJHAltCGI
    51646791U,	// AsmJHAltCGR
    27005230U,	// AsmJHAltCI
    51646783U,	// AsmJHAltCR
    27005596U,	// AsmJHCGI
    51647145U,	// AsmJHCGR
    27005590U,	// AsmJHCI
    51647139U,	// AsmJHCR
    16548U,	// AsmJHE
    27006127U,	// AsmJHEAltCGI
    51647678U,	// AsmJHEAltCGR
    27006120U,	// AsmJHEAltCI
    51647671U,	// AsmJHEAltCR
    27005097U,	// AsmJHECGI
    51646648U,	// AsmJHECGR
    27005090U,	// AsmJHECI
    51646641U,	// AsmJHECR
    16540U,	// AsmJHEL
    17010U,	// AsmJHL
    17511U,	// AsmJL
    27005135U,	// AsmJLAltCGI
    51646688U,	// AsmJLAltCGR
    27005127U,	// AsmJLAltCI
    51646680U,	// AsmJLAltCR
    27006059U,	// AsmJLCGI
    51647608U,	// AsmJLCGR
    27006053U,	// AsmJLCI
    51647602U,	// AsmJLCR
    16651U,	// AsmJLE
    27005740U,	// AsmJLEAltCGI
    51647291U,	// AsmJLEAltCGR
    27005733U,	// AsmJLEAltCI
    51647284U,	// AsmJLEAltCR
    27005200U,	// AsmJLECGI
    51646751U,	// AsmJLECGR
    27005193U,	// AsmJLECI
    51646744U,	// AsmJLECR
    16643U,	// AsmJLEL
    17105U,	// AsmJLH
    27005277U,	// AsmJLHAltCGI
    51646828U,	// AsmJLHAltCGR
    27005270U,	// AsmJLHAltCI
    51646821U,	// AsmJLHAltCR
    27005654U,	// AsmJLHCGI
    51647205U,	// AsmJLHCGR
    27005647U,	// AsmJLHCI
    51647198U,	// AsmJLHCR
    17072U,	// AsmJLHL
    17479U,	// AsmJLL
    16728U,	// AsmJNE
    16720U,	// AsmJNEL
    17191U,	// AsmJNH
    16585U,	// AsmJNHE
    16576U,	// AsmJNHEL
    17183U,	// AsmJNHL
    17578U,	// AsmJNL
    16688U,	// AsmJNLE
    16679U,	// AsmJNLEL
    17147U,	// AsmJNLH
    17138U,	// AsmJNLHL
    17570U,	// AsmJNLL
    17752U,	// AsmJNO
    17746U,	// AsmJNOL
    17742U,	// AsmJO
    17737U,	// AsmJOL
    71784U,	// BASR
    71013U,	// BR
    22644U,	// BRAS
    22619U,	// BRASL
    26810U,	// BRC
    26805U,	// BRCL
    2101363U,	// C
    2101264U,	// CDB
    1316202U,	// CDBR
    1316381U,	// CDFBR
    1316402U,	// CDGBR
    2101309U,	// CEB
    1316298U,	// CEBR
    1316388U,	// CEFBR
    1316409U,	// CEGBR
    2364797U,	// CFDBR
    2364901U,	// CFEBR
    2626385U,	// CFI
    2365038U,	// CFXBR
    2101754U,	// CG
    2364804U,	// CGDBR
    2364908U,	// CGEBR
    2101630U,	// CGF
    2626396U,	// CGFI
    1316577U,	// CGFR
    1578193U,	// CGFRL
    2101869U,	// CGH
    2888614U,	// CGHI
    1578242U,	// CGHRL
    107516U,	// CGHSI
    161980U,	// CGIJ
    1316639U,	// CGR
    194757U,	// CGRJ
    1578216U,	// CGRL
    2365045U,	// CGXBR
    2101865U,	// CH
    107531U,	// CHHSI
    2888603U,	// CHI
    1578236U,	// CHRL
    107502U,	// CHSI
    2103292U,	// CHY
    161976U,	// CIJ
    2102335U,	// CL
    205812U,	// CLFHSI
    3150724U,	// CLFI
    2101767U,	// CLG
    2101641U,	// CLGF
    3150697U,	// CLGFI
    1316590U,	// CLGFR
    1578200U,	// CLGFRL
    1578249U,	// CLGHRL
    205827U,	// CLGHSI
    1316656U,	// CLGR
    1578222U,	// CLGRL
    205842U,	// CLHHSI
    1578265U,	// CLHRL
    238550U,	// CLI
    239638U,	// CLIY
    1316734U,	// CLR
    1578286U,	// CLRL
    2103350U,	// CLY
    85202626U,	// CPSDRdd
    85202626U,	// CPSDRds
    85202626U,	// CPSDRsd
    85202626U,	// CPSDRss
    1316519U,	// CR
    194753U,	// CRJ
    1578188U,	// CRL
    117708727U,	// CS
    117707328U,	// CSG
    117708872U,	// CSY
    1316442U,	// CXBR
    1316395U,	// CXFBR
    1316422U,	// CXGBR
    2103255U,	// CY
    4117U,	// DDB
    267632U,	// DDBR
    4163U,	// DEB
    267729U,	// DEBR
    5187U,	// DL
    4620U,	// DLG
    268086U,	// DLGR
    268163U,	// DLR
    4677U,	// DSG
    4507U,	// DSGF
    268035U,	// DSGFR
    268116U,	// DSGR
    267873U,	// DXBR
    3413341U,	// EAR
    2364811U,	// FIDBR
    2364915U,	// FIEBR
    2365052U,	// FIXBR
    1316685U,	// FLOGR
    4214U,	// IC
    4214U,	// IC32
    6102U,	// IC32Y
    6102U,	// ICY
    1053095U,	// IIHF
    3674749U,	// IIHH
    3675212U,	// IIHL
    1053126U,	// IILF
    3150278U,	// IILF32
    3674806U,	// IILH
    3674806U,	// IILH32
    3675263U,	// IILL
    3675263U,	// IILL32
    17445U,	// J
    16894U,	// JG
    2102330U,	// L
    0U,	// L128
    2101249U,	// LA
    1578182U,	// LARL
    2103249U,	// LAY
    2101356U,	// LB
    1316430U,	// LBR
    1316201U,	// LCDBR
    1316297U,	// LCEBR
    1316576U,	// LCGFR
    1316638U,	// LCGR
    1316524U,	// LCR
    1316441U,	// LCXBR
    2101390U,	// LD
    2101314U,	// LDEB
    1316304U,	// LDEBR
    1316644U,	// LDGR
    1316541U,	// LDR
    1316448U,	// LDXBR
    2103265U,	// LDY
    2101509U,	// LE
    1316214U,	// LEDBR
    1316559U,	// LER
    1316455U,	// LEXBR
    2103276U,	// LEY
    2101763U,	// LG
    2101350U,	// LGB
    1316416U,	// LGBR
    1316535U,	// LGDR
    2101636U,	// LGF
    2626403U,	// LGFI
    1316584U,	// LGFR
    1578201U,	// LGFRL
    2101880U,	// LGH
    2888620U,	// LGHI
    1316717U,	// LGHR
    1578250U,	// LGHRL
    1316651U,	// LGR
    1578223U,	// LGRL
    2101938U,	// LH
    2888646U,	// LHI
    1316724U,	// LHR
    1578266U,	// LHRL
    2103297U,	// LHY
    2101375U,	// LLC
    1316529U,	// LLCR
    2101360U,	// LLGC
    1316516U,	// LLGCR
    2101647U,	// LLGF
    1316597U,	// LLGFR
    1578208U,	// LLGFRL
    2101879U,	// LLGH
    1316716U,	// LLGHR
    1578257U,	// LLGHRL
    2101997U,	// LLH
    1316723U,	// LLHR
    1578272U,	// LLHRL
    3150253U,	// LLIHF
    3936899U,	// LLIHH
    3937362U,	// LLIHL
    3150284U,	// LLILF
    3936956U,	// LLILH
    3937413U,	// LLILL
    152310317U,	// LMG
    1316248U,	// LNDBR
    1316346U,	// LNEBR
    1316489U,	// LNXBR
    1316255U,	// LPDBR
    1316353U,	// LPEBR
    1316496U,	// LPXBR
    1316730U,	// LR
    1578287U,	// LRL
    2103235U,	// LRV
    2101844U,	// LRVG
    1316704U,	// LRVGR
    1316768U,	// LRVR
    0U,	// LX
    2101291U,	// LXDB
    1316276U,	// LXDBR
    2101344U,	// LXEB
    1316374U,	// LXEBR
    1316774U,	// LXR
    2103346U,	// LY
    71369U,	// LZDR
    71380U,	// LZER
    71595U,	// LZXR
    184815626U,	// MADB
    218371426U,	// MADBR
    184815671U,	// MAEB
    218371522U,	// MAEBR
    4122U,	// MDB
    267666U,	// MDBR
    4168U,	// MDEB
    267735U,	// MDEBR
    4174U,	// MEEB
    267742U,	// MEEBR
    791474U,	// MGHI
    4891U,	// MH
    791499U,	// MHI
    6150U,	// MHY
    4637U,	// MLG
    268092U,	// MLGR
    6075U,	// MS
    184815653U,	// MSDB
    218371501U,	// MSDBR
    184815706U,	// MSEB
    218371599U,	// MSEBR
    529296U,	// MSFI
    4682U,	// MSG
    4513U,	// MSGF
    529271U,	// MSGFI
    268042U,	// MSGFR
    268122U,	// MSGR
    268187U,	// MSR
    6221U,	// MSY
    107448U,	// MVGHI
    107455U,	// MVHHI
    107472U,	// MVHI
    238618U,	// MVI
    239654U,	// MVIY
    267907U,	// MXBR
    4145U,	// MXDB
    267707U,	// MXDBR
    5446U,	// N
    4664U,	// NG
    268104U,	// NGR
    238555U,	// NI
    1053108U,	// NIHF
    3674762U,	// NIHH
    3675225U,	// NIHL
    1053139U,	// NILF
    1053139U,	// NILF32
    3674819U,	// NILH
    3674819U,	// NILH32
    3675276U,	// NILL
    3675276U,	// NILL32
    239644U,	// NIY
    268173U,	// NR
    6208U,	// NY
    5451U,	// O
    4668U,	// OG
    268111U,	// OGR
    238559U,	// OI
    1053114U,	// OIHF
    3674768U,	// OIHH
    3675231U,	// OIHL
    1053145U,	// OILF
    1053145U,	// OILF32
    3674825U,	// OILH
    3674825U,	// OILH32
    3675282U,	// OILL
    3675282U,	// OILL32
    239649U,	// OIY
    268177U,	// OR
    6212U,	// OY
    2176U,	// RET
    251924977U,	// RISBG
    251924977U,	// RISBG32
    152310936U,	// RLL
    152310289U,	// RLLG
    6068U,	// S
    4134U,	// SDB
    267694U,	// SDBR
    4187U,	// SEB
    267792U,	// SEBR
    4673U,	// SG
    4508U,	// SGF
    268036U,	// SGFR
    268117U,	// SGR
    4931U,	// SH
    6155U,	// SHY
    5442U,	// SL
    4203U,	// SLB
    4587U,	// SLBG
    267853U,	// SLBR
    1053578U,	// SLFI
    4648U,	// SLG
    268054U,	// SLGBR
    4501U,	// SLGF
    1053552U,	// SLGFI
    268028U,	// SLGFR
    268098U,	// SLGR
    4199581U,	// SLL
    152310295U,	// SLLG
    268168U,	// SLR
    6203U,	// SLY
    2101279U,	// SQDB
    1316262U,	// SQDBR
    2101332U,	// SQEB
    1316360U,	// SQEBR
    1316503U,	// SQXBR
    268183U,	// SR
    4198405U,	// SRA
    152310245U,	// SRAG
    4199732U,	// SRL
    152310306U,	// SRLG
    2103231U,	// ST
    0U,	// ST128
    2103231U,	// ST32
    2103378U,	// ST32Y
    2101385U,	// STC
    2101385U,	// STC32
    2103259U,	// STC32Y
    2103259U,	// STCY
    2101394U,	// STD
    2103270U,	// STDY
    2101620U,	// STE
    2103281U,	// STEY
    2101839U,	// STG
    1578229U,	// STGRL
    2102087U,	// STH
    2102087U,	// STH32
    2103312U,	// STH32Y
    1578279U,	// STHRL
    1578279U,	// STHRL32
    2103312U,	// STHY
    152310322U,	// STMG
    1578297U,	// STRL
    1578297U,	// STRL32
    2103240U,	// STRV
    2101850U,	// STRVG
    0U,	// STX
    2103378U,	// STY
    267934U,	// SXBR
    6217U,	// SY
    0U,	// Select32
    0U,	// Select64
    0U,	// SelectF128
    0U,	// SelectF32
    0U,	// SelectF64
    6094U,	// X
    4705U,	// XG
    268135U,	// XGR
    238623U,	// XI
    1053120U,	// XIHF
    1053151U,	// XILF
    1053151U,	// XILF32
    239660U,	// XIY
    268199U,	// XR
    6231U,	// XY
    0U,	// ZEXT128_32
    0U,	// ZEXT128_64
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'a', 9, 0,
  /* 4 */ 's', 'r', 'a', 9, 0,
  /* 9 */ 'm', 'a', 'd', 'b', 9, 0,
  /* 15 */ 'c', 'd', 'b', 9, 0,
  /* 20 */ 'd', 'd', 'b', 9, 0,
  /* 25 */ 'm', 'd', 'b', 9, 0,
  /* 30 */ 's', 'q', 'd', 'b', 9, 0,
  /* 36 */ 'm', 's', 'd', 'b', 9, 0,
  /* 42 */ 'l', 'x', 'd', 'b', 9, 0,
  /* 48 */ 'm', 'x', 'd', 'b', 9, 0,
  /* 54 */ 'm', 'a', 'e', 'b', 9, 0,
  /* 60 */ 'c', 'e', 'b', 9, 0,
  /* 65 */ 'l', 'd', 'e', 'b', 9, 0,
  /* 71 */ 'm', 'd', 'e', 'b', 9, 0,
  /* 77 */ 'm', 'e', 'e', 'b', 9, 0,
  /* 83 */ 's', 'q', 'e', 'b', 9, 0,
  /* 89 */ 'm', 's', 'e', 'b', 9, 0,
  /* 95 */ 'l', 'x', 'e', 'b', 9, 0,
  /* 101 */ 'l', 'g', 'b', 9, 0,
  /* 106 */ 's', 'l', 'b', 9, 0,
  /* 111 */ 'l', 'l', 'g', 'c', 9, 0,
  /* 117 */ 'i', 'c', 9, 0,
  /* 121 */ 'a', 'l', 'c', 9, 0,
  /* 126 */ 'l', 'l', 'c', 9, 0,
  /* 131 */ 'b', 'r', 'c', 9, 0,
  /* 136 */ 's', 't', 'c', 9, 0,
  /* 141 */ 'l', 'd', 9, 0,
  /* 145 */ 's', 't', 'd', 9, 0,
  /* 150 */ 'j', 'g', 'e', 9, 0,
  /* 155 */ 'j', 'g', 'h', 'e', 9, 0,
  /* 161 */ 'c', 'i', 'j', 'h', 'e', 9, 0,
  /* 168 */ 'c', 'g', 'i', 'j', 'h', 'e', 9, 0,
  /* 176 */ 'c', 'r', 'j', 'h', 'e', 9, 0,
  /* 183 */ 'c', 'g', 'r', 'j', 'h', 'e', 9, 0,
  /* 191 */ 'j', 'g', 'n', 'h', 'e', 9, 0,
  /* 198 */ 'c', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 206 */ 'c', 'g', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 215 */ 'c', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 223 */ 'c', 'g', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 232 */ 'c', 'i', 'j', 'e', 9, 0,
  /* 238 */ 'c', 'g', 'i', 'j', 'e', 9, 0,
  /* 245 */ 'c', 'r', 'j', 'e', 9, 0,
  /* 251 */ 'c', 'g', 'r', 'j', 'e', 9, 0,
  /* 258 */ 'j', 'g', 'l', 'e', 9, 0,
  /* 264 */ 'c', 'i', 'j', 'l', 'e', 9, 0,
  /* 271 */ 'c', 'g', 'i', 'j', 'l', 'e', 9, 0,
  /* 279 */ 'c', 'r', 'j', 'l', 'e', 9, 0,
  /* 286 */ 'c', 'g', 'r', 'j', 'l', 'e', 9, 0,
  /* 294 */ 'j', 'g', 'n', 'l', 'e', 9, 0,
  /* 301 */ 'c', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 309 */ 'c', 'g', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 318 */ 'c', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 326 */ 'c', 'g', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 335 */ 'j', 'g', 'n', 'e', 9, 0,
  /* 341 */ 'c', 'i', 'j', 'n', 'e', 9, 0,
  /* 348 */ 'c', 'g', 'i', 'j', 'n', 'e', 9, 0,
  /* 356 */ 'c', 'r', 'j', 'n', 'e', 9, 0,
  /* 363 */ 'c', 'g', 'r', 'j', 'n', 'e', 9, 0,
  /* 371 */ 's', 't', 'e', 9, 0,
  /* 376 */ 'a', 'g', 'f', 9, 0,
  /* 381 */ 'c', 'g', 'f', 9, 0,
  /* 386 */ 'a', 'l', 'g', 'f', 9, 0,
  /* 392 */ 'c', 'l', 'g', 'f', 9, 0,
  /* 398 */ 'l', 'l', 'g', 'f', 9, 0,
  /* 404 */ 's', 'l', 'g', 'f', 9, 0,
  /* 410 */ 'd', 's', 'g', 'f', 9, 0,
  /* 416 */ 'm', 's', 'g', 'f', 9, 0,
  /* 422 */ 'i', 'i', 'h', 'f', 9, 0,
  /* 428 */ 'l', 'l', 'i', 'h', 'f', 9, 0,
  /* 435 */ 'n', 'i', 'h', 'f', 9, 0,
  /* 441 */ 'o', 'i', 'h', 'f', 9, 0,
  /* 447 */ 'x', 'i', 'h', 'f', 9, 0,
  /* 453 */ 'i', 'i', 'l', 'f', 9, 0,
  /* 459 */ 'l', 'l', 'i', 'l', 'f', 9, 0,
  /* 466 */ 'n', 'i', 'l', 'f', 9, 0,
  /* 472 */ 'o', 'i', 'l', 'f', 9, 0,
  /* 478 */ 'x', 'i', 'l', 'f', 9, 0,
  /* 484 */ 's', 'r', 'a', 'g', 9, 0,
  /* 490 */ 's', 'l', 'b', 'g', 9, 0,
  /* 496 */ 'r', 'i', 's', 'b', 'g', 9, 0,
  /* 503 */ 'a', 'l', 'c', 'g', 9, 0,
  /* 509 */ 'j', 'g', 9, 0,
  /* 513 */ 'a', 'l', 'g', 9, 0,
  /* 518 */ 'c', 'l', 'g', 9, 0,
  /* 523 */ 'd', 'l', 'g', 9, 0,
  /* 528 */ 'r', 'l', 'l', 'g', 9, 0,
  /* 534 */ 's', 'l', 'l', 'g', 9, 0,
  /* 540 */ 'm', 'l', 'g', 9, 0,
  /* 545 */ 's', 'r', 'l', 'g', 9, 0,
  /* 551 */ 's', 'l', 'g', 9, 0,
  /* 556 */ 'l', 'm', 'g', 9, 0,
  /* 561 */ 's', 't', 'm', 'g', 9, 0,
  /* 567 */ 'n', 'g', 9, 0,
  /* 571 */ 'o', 'g', 9, 0,
  /* 575 */ 'c', 's', 'g', 9, 0,
  /* 580 */ 'd', 's', 'g', 9, 0,
  /* 585 */ 'm', 's', 'g', 9, 0,
  /* 590 */ 's', 't', 'g', 9, 0,
  /* 595 */ 'l', 'r', 'v', 'g', 9, 0,
  /* 601 */ 's', 't', 'r', 'v', 'g', 9, 0,
  /* 608 */ 'x', 'g', 9, 0,
  /* 612 */ 'a', 'h', 9, 0,
  /* 616 */ 'c', 'h', 9, 0,
  /* 620 */ 'c', 'g', 'h', 9, 0,
  /* 625 */ 'j', 'g', 'h', 9, 0,
  /* 630 */ 'l', 'l', 'g', 'h', 9, 0,
  /* 636 */ 'i', 'i', 'h', 'h', 9, 0,
  /* 642 */ 'l', 'l', 'i', 'h', 'h', 9, 0,
  /* 649 */ 'n', 'i', 'h', 'h', 9, 0,
  /* 655 */ 'o', 'i', 'h', 'h', 9, 0,
  /* 661 */ 'c', 'i', 'j', 'h', 9, 0,
  /* 667 */ 'c', 'g', 'i', 'j', 'h', 9, 0,
  /* 674 */ 'c', 'r', 'j', 'h', 9, 0,
  /* 680 */ 'c', 'g', 'r', 'j', 'h', 9, 0,
  /* 687 */ 'j', 'g', 'l', 'h', 9, 0,
  /* 693 */ 'i', 'i', 'l', 'h', 9, 0,
  /* 699 */ 'l', 'l', 'i', 'l', 'h', 9, 0,
  /* 706 */ 'n', 'i', 'l', 'h', 9, 0,
  /* 712 */ 'o', 'i', 'l', 'h', 9, 0,
  /* 718 */ 'c', 'i', 'j', 'l', 'h', 9, 0,
  /* 725 */ 'c', 'g', 'i', 'j', 'l', 'h', 9, 0,
  /* 733 */ 'c', 'r', 'j', 'l', 'h', 9, 0,
  /* 740 */ 'c', 'g', 'r', 'j', 'l', 'h', 9, 0,
  /* 748 */ 'l', 'l', 'h', 9, 0,
  /* 753 */ 'j', 'g', 'n', 'l', 'h', 9, 0,
  /* 760 */ 'c', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 768 */ 'c', 'g', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 777 */ 'c', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 785 */ 'c', 'g', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 794 */ 'm', 'h', 9, 0,
  /* 798 */ 'j', 'g', 'n', 'h', 9, 0,
  /* 804 */ 'c', 'i', 'j', 'n', 'h', 9, 0,
  /* 811 */ 'c', 'g', 'i', 'j', 'n', 'h', 9, 0,
  /* 819 */ 'c', 'r', 'j', 'n', 'h', 9, 0,
  /* 826 */ 'c', 'g', 'r', 'j', 'n', 'h', 9, 0,
  /* 834 */ 's', 'h', 9, 0,
  /* 838 */ 's', 't', 'h', 9, 0,
  /* 843 */ 'a', 'f', 'i', 9, 0,
  /* 848 */ 'c', 'f', 'i', 9, 0,
  /* 853 */ 'a', 'g', 'f', 'i', 9, 0,
  /* 859 */ 'c', 'g', 'f', 'i', 9, 0,
  /* 865 */ 'a', 'l', 'g', 'f', 'i', 9, 0,
  /* 872 */ 'c', 'l', 'g', 'f', 'i', 9, 0,
  /* 879 */ 's', 'l', 'g', 'f', 'i', 9, 0,
  /* 886 */ 'm', 's', 'g', 'f', 'i', 9, 0,
  /* 893 */ 'a', 'l', 'f', 'i', 9, 0,
  /* 899 */ 'c', 'l', 'f', 'i', 9, 0,
  /* 905 */ 's', 'l', 'f', 'i', 9, 0,
  /* 911 */ 'm', 's', 'f', 'i', 9, 0,
  /* 917 */ 'a', 'h', 'i', 9, 0,
  /* 922 */ 'c', 'h', 'i', 9, 0,
  /* 927 */ 'a', 'g', 'h', 'i', 9, 0,
  /* 933 */ 'c', 'g', 'h', 'i', 9, 0,
  /* 939 */ 'l', 'g', 'h', 'i', 9, 0,
  /* 945 */ 'm', 'g', 'h', 'i', 9, 0,
  /* 951 */ 'm', 'v', 'g', 'h', 'i', 9, 0,
  /* 958 */ 'm', 'v', 'h', 'h', 'i', 9, 0,
  /* 965 */ 'l', 'h', 'i', 9, 0,
  /* 970 */ 'm', 'h', 'i', 9, 0,
  /* 975 */ 'm', 'v', 'h', 'i', 9, 0,
  /* 981 */ 'c', 'l', 'i', 9, 0,
  /* 986 */ 'n', 'i', 9, 0,
  /* 990 */ 'o', 'i', 9, 0,
  /* 994 */ 'a', 's', 'i', 9, 0,
  /* 999 */ 'a', 'g', 's', 'i', 9, 0,
  /* 1005 */ 'c', 'h', 's', 'i', 9, 0,
  /* 1011 */ 'c', 'l', 'f', 'h', 's', 'i', 9, 0,
  /* 1019 */ 'c', 'g', 'h', 's', 'i', 9, 0,
  /* 1026 */ 'c', 'l', 'g', 'h', 's', 'i', 9, 0,
  /* 1034 */ 'c', 'h', 'h', 's', 'i', 9, 0,
  /* 1041 */ 'c', 'l', 'h', 'h', 's', 'i', 9, 0,
  /* 1049 */ 'm', 'v', 'i', 9, 0,
  /* 1054 */ 'x', 'i', 9, 0,
  /* 1058 */ 'c', 'i', 'j', 9, 0,
  /* 1063 */ 'c', 'g', 'i', 'j', 9, 0,
  /* 1069 */ 'c', 'r', 'j', 9, 0,
  /* 1074 */ 'c', 'g', 'r', 'j', 9, 0,
  /* 1080 */ 'a', 'l', 9, 0,
  /* 1084 */ 'b', 'r', 'c', 'l', 9, 0,
  /* 1090 */ 'd', 'l', 9, 0,
  /* 1094 */ 'j', 'g', 'l', 9, 0,
  /* 1099 */ 'i', 'i', 'h', 'l', 9, 0,
  /* 1105 */ 'l', 'l', 'i', 'h', 'l', 9, 0,
  /* 1112 */ 'n', 'i', 'h', 'l', 9, 0,
  /* 1118 */ 'o', 'i', 'h', 'l', 9, 0,
  /* 1124 */ 'c', 'i', 'j', 'l', 9, 0,
  /* 1130 */ 'c', 'g', 'i', 'j', 'l', 9, 0,
  /* 1137 */ 'c', 'r', 'j', 'l', 9, 0,
  /* 1143 */ 'c', 'g', 'r', 'j', 'l', 9, 0,
  /* 1150 */ 'i', 'i', 'l', 'l', 9, 0,
  /* 1156 */ 'l', 'l', 'i', 'l', 'l', 9, 0,
  /* 1163 */ 'n', 'i', 'l', 'l', 9, 0,
  /* 1169 */ 'o', 'i', 'l', 'l', 9, 0,
  /* 1175 */ 'r', 'l', 'l', 9, 0,
  /* 1180 */ 's', 'l', 'l', 9, 0,
  /* 1185 */ 'j', 'g', 'n', 'l', 9, 0,
  /* 1191 */ 'c', 'i', 'j', 'n', 'l', 9, 0,
  /* 1198 */ 'c', 'g', 'i', 'j', 'n', 'l', 9, 0,
  /* 1206 */ 'c', 'r', 'j', 'n', 'l', 9, 0,
  /* 1213 */ 'c', 'g', 'r', 'j', 'n', 'l', 9, 0,
  /* 1221 */ 'l', 'a', 'r', 'l', 9, 0,
  /* 1227 */ 'c', 'r', 'l', 9, 0,
  /* 1232 */ 'c', 'g', 'f', 'r', 'l', 9, 0,
  /* 1239 */ 'c', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 1247 */ 'l', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 1255 */ 'c', 'g', 'r', 'l', 9, 0,
  /* 1261 */ 'c', 'l', 'g', 'r', 'l', 9, 0,
  /* 1268 */ 's', 't', 'g', 'r', 'l', 9, 0,
  /* 1275 */ 'c', 'h', 'r', 'l', 9, 0,
  /* 1281 */ 'c', 'g', 'h', 'r', 'l', 9, 0,
  /* 1288 */ 'c', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 1296 */ 'l', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 1304 */ 'c', 'l', 'h', 'r', 'l', 9, 0,
  /* 1311 */ 'l', 'l', 'h', 'r', 'l', 9, 0,
  /* 1318 */ 's', 't', 'h', 'r', 'l', 9, 0,
  /* 1325 */ 'c', 'l', 'r', 'l', 9, 0,
  /* 1331 */ 's', 'r', 'l', 9, 0,
  /* 1336 */ 's', 't', 'r', 'l', 9, 0,
  /* 1342 */ 'b', 'r', 'a', 's', 'l', 9, 0,
  /* 1349 */ 'n', 9, 0,
  /* 1352 */ 'j', 'g', 'o', 9, 0,
  /* 1357 */ 'j', 'o', 9, 0,
  /* 1361 */ 'j', 'g', 'n', 'o', 9, 0,
  /* 1367 */ 'j', 'n', 'o', 9, 0,
  /* 1372 */ 'e', 'a', 'r', 9, 0,
  /* 1377 */ 'm', 'a', 'd', 'b', 'r', 9, 0,
  /* 1384 */ 'l', 'c', 'd', 'b', 'r', 9, 0,
  /* 1391 */ 'd', 'd', 'b', 'r', 9, 0,
  /* 1397 */ 'l', 'e', 'd', 'b', 'r', 9, 0,
  /* 1404 */ 'c', 'f', 'd', 'b', 'r', 9, 0,
  /* 1411 */ 'c', 'g', 'd', 'b', 'r', 9, 0,
  /* 1418 */ 'f', 'i', 'd', 'b', 'r', 9, 0,
  /* 1425 */ 'm', 'd', 'b', 'r', 9, 0,
  /* 1431 */ 'l', 'n', 'd', 'b', 'r', 9, 0,
  /* 1438 */ 'l', 'p', 'd', 'b', 'r', 9, 0,
  /* 1445 */ 's', 'q', 'd', 'b', 'r', 9, 0,
  /* 1452 */ 'm', 's', 'd', 'b', 'r', 9, 0,
  /* 1459 */ 'l', 'x', 'd', 'b', 'r', 9, 0,
  /* 1466 */ 'm', 'x', 'd', 'b', 'r', 9, 0,
  /* 1473 */ 'm', 'a', 'e', 'b', 'r', 9, 0,
  /* 1480 */ 'l', 'c', 'e', 'b', 'r', 9, 0,
  /* 1487 */ 'l', 'd', 'e', 'b', 'r', 9, 0,
  /* 1494 */ 'm', 'd', 'e', 'b', 'r', 9, 0,
  /* 1501 */ 'm', 'e', 'e', 'b', 'r', 9, 0,
  /* 1508 */ 'c', 'f', 'e', 'b', 'r', 9, 0,
  /* 1515 */ 'c', 'g', 'e', 'b', 'r', 9, 0,
  /* 1522 */ 'f', 'i', 'e', 'b', 'r', 9, 0,
  /* 1529 */ 'l', 'n', 'e', 'b', 'r', 9, 0,
  /* 1536 */ 'l', 'p', 'e', 'b', 'r', 9, 0,
  /* 1543 */ 's', 'q', 'e', 'b', 'r', 9, 0,
  /* 1550 */ 'm', 's', 'e', 'b', 'r', 9, 0,
  /* 1557 */ 'l', 'x', 'e', 'b', 'r', 9, 0,
  /* 1564 */ 'c', 'd', 'f', 'b', 'r', 9, 0,
  /* 1571 */ 'c', 'e', 'f', 'b', 'r', 9, 0,
  /* 1578 */ 'c', 'x', 'f', 'b', 'r', 9, 0,
  /* 1585 */ 'c', 'd', 'g', 'b', 'r', 9, 0,
  /* 1592 */ 'c', 'e', 'g', 'b', 'r', 9, 0,
  /* 1599 */ 'l', 'g', 'b', 'r', 9, 0,
  /* 1605 */ 'c', 'x', 'g', 'b', 'r', 9, 0,
  /* 1612 */ 's', 'l', 'b', 'r', 9, 0,
  /* 1618 */ 'a', 'x', 'b', 'r', 9, 0,
  /* 1624 */ 'l', 'c', 'x', 'b', 'r', 9, 0,
  /* 1631 */ 'l', 'd', 'x', 'b', 'r', 9, 0,
  /* 1638 */ 'l', 'e', 'x', 'b', 'r', 9, 0,
  /* 1645 */ 'c', 'f', 'x', 'b', 'r', 9, 0,
  /* 1652 */ 'c', 'g', 'x', 'b', 'r', 9, 0,
  /* 1659 */ 'f', 'i', 'x', 'b', 'r', 9, 0,
  /* 1666 */ 'm', 'x', 'b', 'r', 9, 0,
  /* 1672 */ 'l', 'n', 'x', 'b', 'r', 9, 0,
  /* 1679 */ 'l', 'p', 'x', 'b', 'r', 9, 0,
  /* 1686 */ 's', 'q', 'x', 'b', 'r', 9, 0,
  /* 1693 */ 's', 'x', 'b', 'r', 9, 0,
  /* 1699 */ 'l', 'l', 'g', 'c', 'r', 9, 0,
  /* 1706 */ 'a', 'l', 'c', 'r', 9, 0,
  /* 1712 */ 'l', 'l', 'c', 'r', 9, 0,
  /* 1718 */ 'l', 'g', 'd', 'r', 9, 0,
  /* 1724 */ 'l', 'd', 'r', 9, 0,
  /* 1729 */ 'c', 'p', 's', 'd', 'r', 9, 0,
  /* 1736 */ 'l', 'z', 'd', 'r', 9, 0,
  /* 1742 */ 'l', 'e', 'r', 9, 0,
  /* 1747 */ 'l', 'z', 'e', 'r', 9, 0,
  /* 1753 */ 'a', 'g', 'f', 'r', 9, 0,
  /* 1759 */ 'l', 'c', 'g', 'f', 'r', 9, 0,
  /* 1766 */ 'a', 'l', 'g', 'f', 'r', 9, 0,
  /* 1773 */ 'c', 'l', 'g', 'f', 'r', 9, 0,
  /* 1780 */ 'l', 'l', 'g', 'f', 'r', 9, 0,
  /* 1787 */ 's', 'l', 'g', 'f', 'r', 9, 0,
  /* 1794 */ 'd', 's', 'g', 'f', 'r', 9, 0,
  /* 1801 */ 'm', 's', 'g', 'f', 'r', 9, 0,
  /* 1808 */ 'a', 'g', 'r', 9, 0,
  /* 1813 */ 's', 'l', 'b', 'g', 'r', 9, 0,
  /* 1820 */ 'a', 'l', 'c', 'g', 'r', 9, 0,
  /* 1827 */ 'l', 'd', 'g', 'r', 9, 0,
  /* 1833 */ 'a', 'l', 'g', 'r', 9, 0,
  /* 1839 */ 'c', 'l', 'g', 'r', 9, 0,
  /* 1845 */ 'd', 'l', 'g', 'r', 9, 0,
  /* 1851 */ 'm', 'l', 'g', 'r', 9, 0,
  /* 1857 */ 's', 'l', 'g', 'r', 9, 0,
  /* 1863 */ 'n', 'g', 'r', 9, 0,
  /* 1868 */ 'f', 'l', 'o', 'g', 'r', 9, 0,
  /* 1875 */ 'd', 's', 'g', 'r', 9, 0,
  /* 1881 */ 'm', 's', 'g', 'r', 9, 0,
  /* 1887 */ 'l', 'r', 'v', 'g', 'r', 9, 0,
  /* 1894 */ 'x', 'g', 'r', 9, 0,
  /* 1899 */ 'l', 'l', 'g', 'h', 'r', 9, 0,
  /* 1906 */ 'l', 'l', 'h', 'r', 9, 0,
  /* 1912 */ 'a', 'l', 'r', 9, 0,
  /* 1917 */ 'c', 'l', 'r', 9, 0,
  /* 1922 */ 'd', 'l', 'r', 9, 0,
  /* 1927 */ 's', 'l', 'r', 9, 0,
  /* 1932 */ 'n', 'r', 9, 0,
  /* 1936 */ 'o', 'r', 9, 0,
  /* 1940 */ 'b', 'a', 's', 'r', 9, 0,
  /* 1946 */ 'm', 's', 'r', 9, 0,
  /* 1951 */ 'l', 'r', 'v', 'r', 9, 0,
  /* 1957 */ 'l', 'x', 'r', 9, 0,
  /* 1962 */ 'l', 'z', 'x', 'r', 9, 0,
  /* 1968 */ 'b', 'r', 'a', 's', 9, 0,
  /* 1974 */ 'c', 's', 9, 0,
  /* 1978 */ 'm', 's', 9, 0,
  /* 1982 */ 's', 't', 9, 0,
  /* 1986 */ 'l', 'r', 'v', 9, 0,
  /* 1991 */ 's', 't', 'r', 'v', 9, 0,
  /* 1997 */ 'x', 9, 0,
  /* 2000 */ 'l', 'a', 'y', 9, 0,
  /* 2005 */ 'i', 'c', 'y', 9, 0,
  /* 2010 */ 's', 't', 'c', 'y', 9, 0,
  /* 2016 */ 'l', 'd', 'y', 9, 0,
  /* 2021 */ 's', 't', 'd', 'y', 9, 0,
  /* 2027 */ 'l', 'e', 'y', 9, 0,
  /* 2032 */ 's', 't', 'e', 'y', 9, 0,
  /* 2038 */ 'a', 'h', 'y', 9, 0,
  /* 2043 */ 'c', 'h', 'y', 9, 0,
  /* 2048 */ 'l', 'h', 'y', 9, 0,
  /* 2053 */ 'm', 'h', 'y', 9, 0,
  /* 2058 */ 's', 'h', 'y', 9, 0,
  /* 2063 */ 's', 't', 'h', 'y', 9, 0,
  /* 2069 */ 'c', 'l', 'i', 'y', 9, 0,
  /* 2075 */ 'n', 'i', 'y', 9, 0,
  /* 2080 */ 'o', 'i', 'y', 9, 0,
  /* 2085 */ 'm', 'v', 'i', 'y', 9, 0,
  /* 2091 */ 'x', 'i', 'y', 9, 0,
  /* 2096 */ 'a', 'l', 'y', 9, 0,
  /* 2101 */ 'c', 'l', 'y', 9, 0,
  /* 2106 */ 's', 'l', 'y', 9, 0,
  /* 2111 */ 'n', 'y', 9, 0,
  /* 2115 */ 'o', 'y', 9, 0,
  /* 2119 */ 'c', 's', 'y', 9, 0,
  /* 2124 */ 'm', 's', 'y', 9, 0,
  /* 2129 */ 's', 't', 'y', 9, 0,
  /* 2134 */ 'x', 'y', 9, 0,
  /* 2138 */ 'b', 'r', 'a', 's', 'l', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 2151 */ 'b', 'a', 's', 'r', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 2163 */ 'b', 'r', 'a', 's', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 2175 */ 'b', 'r', 9, '%', 'r', '1', '4', 0,
  /* 2183 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2196 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2203 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2213 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 2228 */ 'j', 'g', 0,
  /* 2231 */ 'c', 'i', 'j', 0,
  /* 2235 */ 'c', 'g', 'i', 'j', 0,
  /* 2240 */ 'c', 'r', 'j', 0,
  /* 2244 */ 'c', 'g', 'r', 'j', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 12) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, RET
    return;
    break;
  case 1:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGR, AH, AHI,...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // AGSI, ASI, CGHSI, CHHSI, CHSI, CLFHSI, CLGHSI, CLHHSI, CLI, CLIY, MVGH...
    printBDAddrOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 3:
    // AsmBRC, AsmBRCL
    printU4ImmOperand(MI, 0, O); 
    O << ", "; 
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // AsmJE, AsmJEL, AsmJH, AsmJHE, AsmJHEL, AsmJHL, AsmJL, AsmJLE, AsmJLEL,...
    printPCRelOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // BRAS, BRASL
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // BRC, BRCL
    printCond4Operand(MI, 0, O); 
    O << "\t"; 
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // CGIJ, CGRJ, CIJ, CRJ
    printCond4Operand(MI, 2, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  }


  // Fragment 1 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 15) & 7) {
  default:   // unreachable.
  case 0:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGR, AH, AHI,...
    O << ", "; 
    break;
  case 1:
    // AGSI, ASI
    printS8ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // BASR, BR, LZDR, LZER, LZXR
    return;
    break;
  case 3:
    // CGHSI, CHHSI, CHSI, MVGHI, MVHHI, MVHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // CGIJ, CIJ
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 5:
    // CGRJ, CRJ
    printOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // CLFHSI, CLGHSI, CLHHSI
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // CLI, CLIY, MVI, MVIY, NI, NIY, OI, OIY, XI, XIY
    printU8ImmOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 18) & 31) {
  default:   // unreachable.
  case 0:
    // A, ADB, AEB, AG, AGF, AH, AHY, AL, ALC, ALCG, ALG, ALGF, ALY, AY, DDB,...
    printBDXAddrOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, CS, CS...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AFI, AGFI, MSFI, MSGFI
    printS32ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // AGHI, AHI, MGHI, MHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ALFI, ALGFI, IIHF, IILF, NIHF, NILF, NILF32, OIHF, OILF, OILF32, SLFI,...
    printU32ImmOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // AsmBASR, AsmCGRJ, AsmCRJ, AsmJEAltCGR, AsmJEAltCR, AsmJECGR, AsmJECR, ...
    printOperand(MI, 1, O); 
    break;
  case 6:
    // AsmBRAS, AsmBRASL, CGFRL, CGHRL, CGRL, CHRL, CLGFRL, CLGHRL, CLGRL, CL...
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // AsmCGIJ, AsmCIJ, AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltC...
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 8:
    // C, CDB, CEB, CG, CGF, CGH, CH, CHY, CL, CLG, CLGF, CLY, CY, L, LA, LAY...
    printBDXAddrOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // CFDBR, CFEBR, CFXBR, CGDBR, CGEBR, CGXBR, FIDBR, FIEBR, FIXBR
    printU4ImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 10:
    // CFI, CGFI, LGFI
    printS32ImmOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // CGHI, CHI, LGHI, LHI
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // CLFI, CLGFI, IILF32, LLIHF, LLILF
    printU32ImmOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // EAR
    printAccessRegOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // IIHH, IIHL, IILH, IILH32, IILL, IILL32, NIHH, NIHL, NILH, NILH32, NILL...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 15:
    // LLIHH, LLIHL, LLILH, LLILL
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 16:
    // SLL, SRA, SRL
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 23) & 3) {
  default:   // unreachable.
  case 0:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, AsmBAS...
    return;
    break;
  case 1:
    // AsmCGIJ, AsmCIJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 2:
    // AsmCGRJ, AsmCRJ, AsmJEAltCGR, AsmJEAltCR, AsmJECGR, AsmJECR, AsmJHAltC...
    O << ", "; 
    break;
  case 3:
    // AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltCGI, AsmJHAltCI, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 25) & 7) {
  default:   // unreachable.
  case 0:
    // AsmCGRJ, AsmCRJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 1:
    // AsmJEAltCGR, AsmJEAltCR, AsmJECGR, AsmJECR, AsmJHAltCGR, AsmJHAltCR, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // CPSDRdd, CPSDRds, CPSDRsd, CPSDRss
    printOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CS, CSG, CSY
    printBDAddrOperand(MI, 3, O); 
    return;
    break;
  case 4:
    // LMG, RLL, RLLG, SLLG, SRAG, SRLG, STMG
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // MADB, MAEB, MSDB, MSEB
    printBDXAddrOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // MADBR, MAEBR, MSDBR, MSEBR
    printOperand(MI, 3, O); 
    return;
    break;
  case 7:
    // RISBG, RISBG32
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    O << ", "; 
    printU6ImmOperand(MI, 5, O); 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SystemZInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 82 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'r', '1', '0', 0,
  /* 8 */ 'f', '0', 0,
  /* 11 */ 'r', '0', 0,
  /* 14 */ 'f', '1', '1', 0,
  /* 18 */ 'r', '1', '1', 0,
  /* 22 */ 'f', '1', 0,
  /* 25 */ 'r', '1', 0,
  /* 28 */ 'f', '1', '2', 0,
  /* 32 */ 'r', '1', '2', 0,
  /* 36 */ 'f', '2', 0,
  /* 39 */ 'r', '2', 0,
  /* 42 */ 'f', '1', '3', 0,
  /* 46 */ 'r', '1', '3', 0,
  /* 50 */ 'f', '3', 0,
  /* 53 */ 'r', '3', 0,
  /* 56 */ 'f', '1', '4', 0,
  /* 60 */ 'r', '1', '4', 0,
  /* 64 */ 'f', '4', 0,
  /* 67 */ 'r', '4', 0,
  /* 70 */ 'f', '1', '5', 0,
  /* 74 */ 'r', '1', '5', 0,
  /* 78 */ 'f', '5', 0,
  /* 81 */ 'r', '5', 0,
  /* 84 */ 'f', '6', 0,
  /* 87 */ 'r', '6', 0,
  /* 90 */ 'f', '7', 0,
  /* 93 */ 'r', '7', 0,
  /* 96 */ 'f', '8', 0,
  /* 99 */ 'r', '8', 0,
  /* 102 */ 'f', '9', 0,
  /* 105 */ 'r', '9', 0,
  /* 108 */ 'c', 'c', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    108, 8, 8, 8, 22, 22, 22, 36, 36, 50, 50, 64, 64, 64, 
    78, 78, 78, 84, 84, 90, 90, 96, 96, 96, 102, 102, 102, 0, 
    0, 14, 14, 28, 28, 28, 42, 42, 42, 56, 56, 70, 70, 11, 
    11, 11, 25, 25, 39, 39, 39, 53, 53, 67, 67, 67, 81, 81, 
    87, 87, 87, 93, 93, 99, 99, 99, 105, 105, 4, 4, 4, 18, 
    18, 32, 32, 32, 46, 46, 60, 60, 60, 74, 74, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SystemZInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
